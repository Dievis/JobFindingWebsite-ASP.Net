// <auto-generated />
using System;
using DACS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DACS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241213084717_DACN")]
    partial class DACN
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DACS.Models.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileCV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenCV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("DACS.Models.DonUngTuyen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileCV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhieuDangTuyenId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenCV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("XetDuyet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhieuDangTuyenId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("DonUngTuyens");
                });

            modelBuilder.Entity("DACS.Models.Meet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NhaTuyenDungId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("YeuCau")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NhaTuyenDungId");

                    b.HasIndex("UserId");

                    b.ToTable("Meets");
                });

            modelBuilder.Entity("DACS.Models.NhaTuyenDung", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChucVu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiaDiem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GiayChungThuc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GiayPhepKinhDoanh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HinhAnhCty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageBangTin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageDaiDien")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaSoThue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuyMo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SDT")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenCty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenNTD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThongTinCty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TinNhanThem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TinhId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XetDuyet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TinhId");

                    b.HasIndex("UserId");

                    b.ToTable("NhaTuyenDungs");
                });

            modelBuilder.Entity("DACS.Models.PhieuDangTuyen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChucDanh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiaDiem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HanNopHoSo")
                        .HasColumnType("datetime2");

                    b.Property<string>("MoTa")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MucLuong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamKN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgayLapPhieu")
                        .HasColumnType("datetime2");

                    b.Property<int>("NhaTuyenDungId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenNganh")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenViecLam")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TinhId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NhaTuyenDungId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TinhId");

                    b.ToTable("PhieuDangTuyens");
                });

            modelBuilder.Entity("DACS.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("StatusName")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = true
                        },
                        new
                        {
                            Id = 2,
                            StatusName = false
                        });
                });

            modelBuilder.Entity("DACS.Models.Tinh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TenTinh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tinhs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TenTinh = "Hà Nội"
                        },
                        new
                        {
                            Id = 2,
                            TenTinh = "Hà Giang"
                        },
                        new
                        {
                            Id = 3,
                            TenTinh = "Cao Bằng"
                        },
                        new
                        {
                            Id = 4,
                            TenTinh = "Bắc Kạn"
                        },
                        new
                        {
                            Id = 5,
                            TenTinh = "Tuyên Quang"
                        },
                        new
                        {
                            Id = 6,
                            TenTinh = "Lào Cai"
                        },
                        new
                        {
                            Id = 7,
                            TenTinh = "Điện Biên"
                        },
                        new
                        {
                            Id = 8,
                            TenTinh = "Lai Châu"
                        },
                        new
                        {
                            Id = 9,
                            TenTinh = "Sơn La"
                        },
                        new
                        {
                            Id = 10,
                            TenTinh = "Yên Bái"
                        },
                        new
                        {
                            Id = 11,
                            TenTinh = "Hòa Bình"
                        },
                        new
                        {
                            Id = 12,
                            TenTinh = "Thái Nguyên"
                        },
                        new
                        {
                            Id = 13,
                            TenTinh = "Lạng Sơn"
                        },
                        new
                        {
                            Id = 14,
                            TenTinh = "Quảng Ninh"
                        },
                        new
                        {
                            Id = 15,
                            TenTinh = "Bắc Giang"
                        },
                        new
                        {
                            Id = 16,
                            TenTinh = "Phú Thọ"
                        },
                        new
                        {
                            Id = 17,
                            TenTinh = "Vĩnh Phúc"
                        },
                        new
                        {
                            Id = 18,
                            TenTinh = "Bắc Ninh"
                        },
                        new
                        {
                            Id = 19,
                            TenTinh = "Hải Dương"
                        },
                        new
                        {
                            Id = 20,
                            TenTinh = "Hải Phòng"
                        },
                        new
                        {
                            Id = 21,
                            TenTinh = "Hưng Yên"
                        },
                        new
                        {
                            Id = 22,
                            TenTinh = "Thái Bình"
                        },
                        new
                        {
                            Id = 23,
                            TenTinh = "Hà Nam"
                        },
                        new
                        {
                            Id = 24,
                            TenTinh = "Nam Định"
                        },
                        new
                        {
                            Id = 25,
                            TenTinh = "Ninh Bình"
                        },
                        new
                        {
                            Id = 26,
                            TenTinh = "Thanh Hóa"
                        },
                        new
                        {
                            Id = 27,
                            TenTinh = "Nghệ An"
                        },
                        new
                        {
                            Id = 28,
                            TenTinh = "Hà Tĩnh"
                        },
                        new
                        {
                            Id = 29,
                            TenTinh = "Quảng Bình"
                        },
                        new
                        {
                            Id = 30,
                            TenTinh = "Quảng Trị"
                        },
                        new
                        {
                            Id = 31,
                            TenTinh = "Thừa Thiên Huế"
                        },
                        new
                        {
                            Id = 32,
                            TenTinh = "Đà Nẵng"
                        },
                        new
                        {
                            Id = 33,
                            TenTinh = "Quảng Nam"
                        },
                        new
                        {
                            Id = 34,
                            TenTinh = "Quảng Ngãi"
                        },
                        new
                        {
                            Id = 35,
                            TenTinh = "Bình Định"
                        },
                        new
                        {
                            Id = 36,
                            TenTinh = "Phú Yên"
                        },
                        new
                        {
                            Id = 37,
                            TenTinh = "Khánh Hòa"
                        },
                        new
                        {
                            Id = 38,
                            TenTinh = "Ninh Thuận"
                        },
                        new
                        {
                            Id = 39,
                            TenTinh = "Bình Thuận"
                        },
                        new
                        {
                            Id = 40,
                            TenTinh = "Kon Tum"
                        },
                        new
                        {
                            Id = 41,
                            TenTinh = "Gia Lai"
                        },
                        new
                        {
                            Id = 42,
                            TenTinh = "Đắk Lắk"
                        },
                        new
                        {
                            Id = 43,
                            TenTinh = "Đắk Nông"
                        },
                        new
                        {
                            Id = 44,
                            TenTinh = "Lâm Đồng"
                        },
                        new
                        {
                            Id = 45,
                            TenTinh = "Bình Phước"
                        },
                        new
                        {
                            Id = 46,
                            TenTinh = "Tây Ninh"
                        },
                        new
                        {
                            Id = 47,
                            TenTinh = "Bình Dương"
                        },
                        new
                        {
                            Id = 48,
                            TenTinh = "Đồng Nai"
                        },
                        new
                        {
                            Id = 49,
                            TenTinh = "Bà Rịa - Vũng Tàu"
                        },
                        new
                        {
                            Id = 50,
                            TenTinh = "Hồ Chí Minh"
                        },
                        new
                        {
                            Id = 51,
                            TenTinh = "Long An"
                        },
                        new
                        {
                            Id = 52,
                            TenTinh = "Tiền Giang"
                        },
                        new
                        {
                            Id = 53,
                            TenTinh = "Bến Tre"
                        },
                        new
                        {
                            Id = 54,
                            TenTinh = "Trà Vinh"
                        },
                        new
                        {
                            Id = 55,
                            TenTinh = "Vĩnh Long"
                        },
                        new
                        {
                            Id = 56,
                            TenTinh = "Đồng Tháp"
                        },
                        new
                        {
                            Id = 57,
                            TenTinh = "An Giang"
                        },
                        new
                        {
                            Id = 58,
                            TenTinh = "Kiên Giang"
                        },
                        new
                        {
                            Id = 59,
                            TenTinh = "Cần Thơ"
                        },
                        new
                        {
                            Id = 60,
                            TenTinh = "Hậu Giang"
                        },
                        new
                        {
                            Id = 61,
                            TenTinh = "Sóc Trăng"
                        },
                        new
                        {
                            Id = 62,
                            TenTinh = "Bạc Liêu"
                        },
                        new
                        {
                            Id = 63,
                            TenTinh = "Cà Mau"
                        });
                });

            modelBuilder.Entity("DACS.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CCCD")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2cefda62-e239-442f-bab1-e8ac64dcb228",
                            AccessFailedCount = 0,
                            CCCD = "012345678999",
                            ConcurrencyStamp = "d88bfd8e-c0be-4131-b86f-02cedd71c85a",
                            Email = "Admin1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Quản trị viên",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEARjpPXGA1q7B+gvHrnK9BnACIg0B0fu2OmC5yaNUuBzSCzL7e+vIWkGU9x5WHHAWw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "353d862e-f9c1-4f8f-942c-bfb6c80d14f2",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "98ba419e-c32c-4cc5-aea1-94d31e894890",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f9261c4b-48ac-4b49-a6b1-38968b6939d1",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "cb7656d5-6c36-4b01-a070-ca78666dd40b",
                            Name = "Employer",
                            NormalizedName = "EMPLOYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2cefda62-e239-442f-bab1-e8ac64dcb228",
                            RoleId = "98ba419e-c32c-4cc5-aea1-94d31e894890"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("DACS.Models.CV", b =>
                {
                    b.HasOne("DACS.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DACS.Models.DonUngTuyen", b =>
                {
                    b.HasOne("DACS.Models.PhieuDangTuyen", "PhieuDangTuyens")
                        .WithMany()
                        .HasForeignKey("PhieuDangTuyenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DACS.Models.Status", "Statuses")
                        .WithMany("DonUngTuyens")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DACS.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PhieuDangTuyens");

                    b.Navigation("Statuses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DACS.Models.Meet", b =>
                {
                    b.HasOne("DACS.Models.NhaTuyenDung", "NhaTuyenDungs")
                        .WithMany()
                        .HasForeignKey("NhaTuyenDungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DACS.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("NhaTuyenDungs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DACS.Models.NhaTuyenDung", b =>
                {
                    b.HasOne("DACS.Models.Status", "Statuses")
                        .WithMany("NhaTuyenDungs")
                        .HasForeignKey("StatusId");

                    b.HasOne("DACS.Models.Tinh", "Tinhs")
                        .WithMany("NhaTuyenDungs")
                        .HasForeignKey("TinhId");

                    b.HasOne("DACS.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Statuses");

                    b.Navigation("Tinhs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DACS.Models.PhieuDangTuyen", b =>
                {
                    b.HasOne("DACS.Models.NhaTuyenDung", "NhaTuyenDungs")
                        .WithMany()
                        .HasForeignKey("NhaTuyenDungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DACS.Models.Status", "Statuses")
                        .WithMany("PhieuDangTuyens")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DACS.Models.Tinh", "Tinhs")
                        .WithMany("PhieuDangTuyens")
                        .HasForeignKey("TinhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NhaTuyenDungs");

                    b.Navigation("Statuses");

                    b.Navigation("Tinhs");
                });

            modelBuilder.Entity("DACS.Models.User", b =>
                {
                    b.HasOne("DACS.Models.Status", "Statuses")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DACS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DACS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DACS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DACS.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DACS.Models.Status", b =>
                {
                    b.Navigation("DonUngTuyens");

                    b.Navigation("NhaTuyenDungs");

                    b.Navigation("PhieuDangTuyens");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DACS.Models.Tinh", b =>
                {
                    b.Navigation("NhaTuyenDungs");

                    b.Navigation("PhieuDangTuyens");
                });
#pragma warning restore 612, 618
        }
    }
}
